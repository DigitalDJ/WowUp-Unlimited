--- wowup-electron/src/app/addon-providers/curse-addon-provider.ts
+++ wowup-electron/src/app/addon-providers/curse-addon-provider.ts
@@ -1,5 +1,6 @@
 import * as cfv2 from "curseforge-v2";
 import * as _ from "lodash";
+import { filter } from "rxjs/operators";
 import { v4 as uuidv4 } from "uuid";
 import {
   Addon,
@@ -32,6 +33,7 @@
   ADDON_PROVIDER_CURSEFORGE,
   NO_LATEST_SEARCH_RESULT_FILES_ERROR,
   NO_SEARCH_RESULTS_ERROR,
+  PREF_CF2_API_KEY,
 } from "../../common/constants";
 import { AppConfig } from "../../environments/environment";
 import { CachingService } from "../services/caching/caching-service";
@@ -39,6 +41,7 @@
 import { TocService } from "../services/toc/toc.service";
 import { strictFilter } from "../utils/array.utils";
 import { TocNotFoundError } from "../errors";
+import { SensitiveStorageService } from "../services/storage/sensitive-storage.service";
 
 interface ProtocolData {
   addonId: number;
@@ -79,7 +82,7 @@
 
 export class CurseAddonProvider extends AddonProvider {
   private readonly _circuitBreaker: CircuitBreakerWrapper;
-  private readonly _cf2Client: cfv2.CFV2Client;
+  private _cf2Client: cfv2.CFV2Client;
 
   public readonly name = ADDON_PROVIDER_CURSEFORGE;
   public readonly forceIgnore = false;
@@ -95,6 +98,7 @@
     private _cachingService: CachingService,
     private _networkService: NetworkService,
     private _tocService: TocService,
+    private _sensitiveStorageService: SensitiveStorageService,
   ) {
     super();
 
@@ -104,8 +108,9 @@
       AppConfig.curseforge.httpTimeoutMs,
     );
 
-    this._cf2Client = new cfv2.CFV2Client({
-      apiKey: AppConfig.curseforge.apiKey,
+    // Pick up a CF2 api key change at runtime to force a new client to be created
+    this._sensitiveStorageService.change$.pipe(filter((change) => change.key === PREF_CF2_API_KEY)).subscribe(() => {
+      this._cf2Client = undefined;
     });
   }
 
@@ -350,13 +355,18 @@
       return;
     }
 
+    const client = await this.getClient();
+    if (!client) {
+      return;
+    }
+
     const scanResults = addonFolders
       .map((af) => af.cfScanResults)
       .filter((sr): sr is AddonScanResult => sr !== undefined);
 
     const fingerprints = scanResults.map((sr) => sr.fingerprintNum);
 
-    const result = await this._cf2Client.getFingerprintMatches({ fingerprints });
+    const result = await client.getFingerprintMatches({ fingerprints });
     const fingerprintData = result.data?.data;
     try {
       const matchPairs: ScanMatchPair[] = [];
@@ -383,7 +393,7 @@
       }
 
       const addonIds = matchPairs.map((mp) => mp.match.id);
-      const getAddonsResult = await this._cf2Client.getMods({ modIds: addonIds });
+      const getAddonsResult = await client.getMods({ modIds: addonIds });
       const addonResultData = getAddonsResult.data?.data;
 
       const potentialChildren: ScanMatchPair[] = [];
@@ -428,12 +438,13 @@
     externalReleaseId: string,
   ): Promise<string> {
     try {
+      const client = await this.getClient();
       const cacheKey = `${this.name}_changelog_${externalId}_${externalReleaseId}`;
 
       const response = await this._cachingService.transaction(
         cacheKey,
         () => {
-          return this._cf2Client.getModFileChangelog(parseInt(externalId, 10), parseInt(externalReleaseId, 10));
+          return client.getModFileChangelog(parseInt(externalId, 10), parseInt(externalReleaseId, 10));
         },
         CHANGELOG_CACHE_TTL_SEC,
       );
@@ -448,11 +459,13 @@
 
   public override async getDescription(installation: WowInstallation, externalId: string): Promise<string> {
     try {
+      const client = await this.getClient();
+
       const cacheKey = `${this.name}_description_${externalId}`;
       const response = await this._cachingService.transaction(
         cacheKey,
         () => {
-          return this._cf2Client.getModDescription(parseInt(externalId, 10));
+          return client.getModDescription(parseInt(externalId, 10));
         },
         CHANGELOG_CACHE_TTL_SEC,
       );
@@ -629,8 +642,9 @@
   }
 
   private async getAddonFileById(addonId: string | number, fileId: string | number): Promise<cfv2.CF2File | undefined> {
+    const client = await this.getClient();
     const response = await this._circuitBreaker.fire(() =>
-      this._cf2Client.getModFile(parseInt(`${addonId}`, 10), parseInt(`${fileId}`, 10)),
+      client.getModFile(parseInt(`${addonId}`, 10), parseInt(`${fileId}`, 10)),
     );
 
     return response.data?.data;
@@ -638,7 +652,8 @@
 
   private async getByIdBase(addonId: string): Promise<cfv2.CF2Addon | undefined> {
     try {
-      const response = await this._circuitBreaker.fire(() => this._cf2Client.getMod(parseInt(addonId, 10)));
+      const client = await this.getClient();
+      const response = await this._circuitBreaker.fire(() => client.getMod(parseInt(addonId, 10)));
       return response.data?.data;
     } catch (e) {
       // We want to eat things like 400/500 responses
@@ -818,12 +833,19 @@
       modIds: addonIds,
     };
 
-    const response = await this._circuitBreaker.fire(() => this._cf2Client.getMods(request));
+    const client = await this.getClient();
+
+    const response = await this._circuitBreaker.fire(() => client.getMods(request));
 
     return response.data?.data || [];
   }
 
   private async getFeaturedAddonList(wowInstallation: WowInstallation): Promise<cfv2.CF2Addon[]> {
+    const client = await this.getClient();
+    if (!client) {
+      return [];
+    }
+
     const gameVersionTypeId = this.getGameVersionTypeId(wowInstallation.clientType);
 
     const request: cfv2.CF2GetFeaturedModsRequest = {
@@ -835,7 +857,7 @@
     const cacheKey = `getFeaturedAddonList-${JSON.stringify(request)}`;
     const result = await this._cachingService.transaction(
       cacheKey,
-      () => this._cf2Client.getFeaturedMods(request),
+      () => client.getFeaturedMods(request),
       FEATURED_ADDONS_CACHE_TTL_SEC,
     );
 
@@ -868,7 +890,8 @@
       gameVersionTypeId: this.getCFGameVersionType(clientType),
     };
 
-    const response = await this._circuitBreaker.fire(() => this._cf2Client.searchMods(request));
+    const client = await this.getClient();
+    const response = await this._circuitBreaker.fire(() => client.searchMods(request));
 
     return response.data?.data || [];
   }
@@ -911,10 +934,29 @@
 
     const cacheKey = JSON.stringify(request);
 
+    const client = await this.getClient();
     const result = await this._cachingService.transaction(cacheKey, () =>
-      this._circuitBreaker.fire(() => this._cf2Client.searchMods(request)),
+      this._circuitBreaker.fire(() => client.searchMods(request)),
     );
 
     return result?.data?.data ?? [];
   }
+
+  private async getClient(): Promise<cfv2.CFV2Client | undefined> {
+    if (this._cf2Client) {
+      return this._cf2Client;
+    }
+
+    let apiKey = await this._sensitiveStorageService.getAsync(PREF_CF2_API_KEY);
+    if (typeof apiKey !== "string" || apiKey.length === 0) {
+      await this._sensitiveStorageService.setAsync(PREF_CF2_API_KEY, AppConfig.curseforge.apiKey);
+      apiKey = AppConfig.curseforge.apiKey;
+    }
+
+    this._cf2Client = new cfv2.CFV2Client({
+      apiKey,
+    });
+
+    return this._cf2Client;
+  }  
 }
--- wowup-electron/src/app/components/options/options-addon-section/options-addon-section.component.html
+++ wowup-electron/src/app/components/options/options-addon-section/options-addon-section.component.html
@@ -26,12 +26,30 @@
       </mat-selection-list>
     </div>
   </div>
 
   <form #prefForm [formGroup]="preferenceForm">
     <div class="divider"></div>
+    <div class="setting row align-items-center">
+      <div class="flex-grow-1">
+        <div>
+          {{ "PAGES.OPTIONS.ADDON.CURSE_FORGE_V2.API_KEY_TITLE" | translate }}
+        </div>
+        <small class="text-2">{{ "PAGES.OPTIONS.ADDON.CURSE_FORGE_V2.API_KEY_DESCRIPTION" | translate }}</small>
+      </div>
+      <mat-form-field class="example-full-width" appearance="fill">
+        <mat-label>{{ "PAGES.OPTIONS.ADDON.CURSE_FORGE_V2.API_KEY_TITLE" | translate }}</mat-label>
+        <input matInput formControlName="cfV2ApiKey" type="password" />
+      </mat-form-field>
+    </div>
+    <div class="setting row align-items-center">
+      <button type="button" mat-flat-button color="primary" (click)="insertCurseApiKey()">
+        {{ "PAGES.OPTIONS.ADDON.CURSE_FORGE_V2.INSERT_API_KEY" | translate }}
+      </button>
+    </div>
+    <div class="divider"></div>
     <div class="setting row align-items-center">
       <div class="flex-grow-1">
         <div>
           {{ "PAGES.OPTIONS.ADDON.GITHUB_PERSONAL_ACCESS_TOKEN.TITLE" | translate }}
         </div>
         <small
--- wowup-electron/src/app/components/options/options-addon-section/options-addon-section.component.ts
+++ wowup-electron/src/app/components/options/options-addon-section/options-addon-section.component.ts
@@ -19,6 +19,7 @@
 import { TranslateService } from "@ngx-translate/core";
 
 import {
+  ADDON_PROVIDER_CURSEFORGE,
   ADDON_PROVIDER_WAGO,
   PREF_CF2_API_KEY,
   PREF_GITHUB_PERSONAL_ACCESS_TOKEN,
@@ -91,6 +92,10 @@
       .subscribe();
   }
 
+  public insertCurseApiKey = (): void => {
+    this.preferenceForm.get("cfV2ApiKey")?.setValue(AppConfig.curseforge.apiKey);
+  };
+
   public ngOnInit(): void {
     this.loadProviderStates();
     this.loadSensitiveData().catch(console.error);
@@ -105,6 +110,9 @@
     for (const option of event.options) {
       const providerName: AddonProviderType = option.value;
 
+      if (option.selected && providerName == ADDON_PROVIDER_CURSEFORGE) {
+        this.insertCurseApiKey();
+      }
       if (this.isWago && option.selected && providerName === ADDON_PROVIDER_WAGO) {
         this.onWagoEnable(option);
       } else {
--- wowup-electron/src/assets/i18n/en.json
+++ wowup-electron/src/assets/i18n/en.json
@@ -508,6 +508,7 @@
         "CURSE_FORGE_V2": {
           "API_KEY_DESCRIPTION": "If you have requested a CurseForge API key you can input it here to connect to their API.",
           "API_KEY_TITLE": "CurseForge API Key",
+          "INSERT_API_KEY": "Insert Default CurseForge API Key",
           "PROVIDER_NOTE": "API Key Required"
         },
         "ENABLED_PROVIDERS": {
--- wowup-electron/src/app/services/addons/addon.provider.factory.ts
+++ wowup-electron/src/app/services/addons/addon.provider.factory.ts
@@ -161,7 +161,7 @@
   }
 
   public createCurseProvider(): CurseAddonProvider {
-    return new CurseAddonProvider(this._cachingService, this._networkService, this._tocService);
+    return new CurseAddonProvider(this._cachingService, this._networkService, this._tocService, this._sensitiveStorageService);
   }
 
   public createTukUiAddonProvider(): TukUiAddonProvider {
